[gd_scene load_steps=3 format=2]

[sub_resource type="Shader" id=8]
code = "// Author @patriciogv - 2015
// http://patriciogonzalezvivo.com

//taken from https://thebookofshaders.com/edit.php#11/lava-lamp.frag
//freely adapted to fit the project
shader_type canvas_item;

//move the texture of the shader around when the player is moving
uniform vec2 player_pos =vec2(.0);
uniform vec2 speed = vec2(0.005, -0.005);

vec3 mod289(vec3 x) { 
	return x - floor(x * (1.0 / 289.0)) * 289.0; 
}
vec2 mod289Vec2(vec2 x) { 
	return x - floor(x * (1.0 / 289.0)) * 289.0; 
}
vec3 permute(vec3 x) { 
	return mod289(((x*34.0)+1.0)*x); 
}

float snoise(vec2 v) {
    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                        -0.577350269189626,  // -1.0 + 2.0 * C.x
                        0.024390243902439); // 1.0 / 41.0
    vec2 i  = floor(v + dot(v, C.yy) );
    vec2 x0 = v -   i + dot(i, C.xx);
    vec2 i1;
    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;
    i = mod289Vec2(i); // Avoid truncation effects in permutation
    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
        + i.x + vec3(0.0, i1.x, 1.0 ));

    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
    m = m*m ;
    m = m*m ;
    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;
    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
    vec3 g;
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}

void fragment() {
	vec2 u_resolution = 1.0 / SCREEN_PIXEL_SIZE;
	float u_time = TIME;
    vec2 st = FRAGCOORD.xy/u_resolution.xy;
    st.x *= u_resolution.x/u_resolution.y;
    vec3 color = vec3(0.0);
    vec2 pos = vec2(st*3.);
	
	//move the texture
	pos+= player_pos * speed;
    
	float DF = 0.0;

    // Add a random position
    float a = 0.0;
    vec2 vel = vec2(u_time*.05);
    DF += snoise(pos+vel)*.25+.25;

    // Add a random position
    a = snoise(pos*vec2(cos(u_time*0.05),sin(u_time*0.1))*0.1)*3.1415;
    vel = vec2(cos(a),sin(a));
    DF += snoise(pos+vel)*.25+.25;

    color = vec3( smoothstep(.7,.75,fract(DF)) );
    if(distance(color, vec3(.0,1.,.0))>1.){
        color = vec3(0.248,0.419,0.935);
    }
    else{
        color = vec3(0.176,0.268,0.840);
    }
    
    vec3 foam_color = vec3(0.0);
    // Add a random position
    a = 0.0;
    vel = vec2(u_time*.05);
    DF += snoise(pos+vel)*.25+.25;

    // Add a random position
    a = snoise(pos*vec2(cos(u_time*1.030),cos(u_time*0.1))*0.01)*3.1415;
    vel = vec2(cos(a),sin(a));
    DF += snoise(pos+vel)*.25+.25;

    foam_color = vec3( smoothstep(.7,.75,fract(DF)) );
    if(distance(foam_color, vec3(.0,1.,.0))>1.){
        foam_color = vec3(1.,1.000,1.);
    }
    
    else{
        foam_color = vec3(0.027,0.099,0.840);
    }
    
    color *= foam_color;
    //gl_FragColor = vec4(1.0-color,1.0);
    COLOR = vec4(color,1.0);
}
"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/player_pos = Vector2( 0, 0 )
shader_param/speed = Vector2( 0.005, -0.005 )

[node name="water" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="waterShader" type="ColorRect" parent="."]
material = SubResource( 9 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}
